getHdata(lead)
require(rms)
getHdata(lead)
contents(lead)
args(upData)
getHdata(lead)
lead <- subset(lead, select=c(ld72, ld73, age, maxfwt))
contents(lead)
dd <- datadist(lead); options(datadist='dd')
f <- ols(maxfwt ~ ld72 + ld73, data=lead)
f
g=ols(maxfwt ~ rcs(ld72,4) + rcs(ld73, 4), data=lead)
g
anova(g)
f
describe(lead)
f <- ols(maxfwt ~ age + ld72 + ld73, data=lead)
f
anova(f, ld72, ld73)
describe(lead)
g <- Function(f)  # create an R function that represents the fitted model
g
g(age=10, ld72=21, ld73=c(21, 47))
predict(g, data.frame(age=10, ld72=21, ld73=c(21, 47)))
predict(f, data.frame(age=10, ld72=21, ld73=c(21, 47)))
args(predict.ols)
args(predict)
predict(f, data.frame(age=10, ld72=21, ld73=c(21, 47)), se.fit=TRUE)
f <- ols(maxfwt ~ ld72*ld73,data=lead)
f
anova(f)
plot.lm(f)
stats::plot(f)
find('plot.lm')
fl=lm(maxfwt ~ ld72+ld73,data=lead)
class(fl)
plot(fl)
plot(f)
f
resid(fl)
plot(resid(fl))
plot(fl)
class(fl)
find('lm')
stats::plot
stats:::plot.lm
?plot.lm
plot.lm(f, which=c(1,3))
stats:::plot.lm(f, which=c(1,3))
class(f)
stats:::plot.lm
gg=stats:::plot.lm
gg(f)
traceback()
gg(f, type='ordinary')
r <- resid(f)
plot(fitted(f), r); abline(h=0)  # yhat vs. r
plot(age,    r);    abline(h=0)
?matplot
matplot(lead[c('age', 'lead72', 'lead73')], r)
matplot(lead[c('age', 'ld72', 'ld73')], r)
?matplot
matplot(lead[c('age', 'ld72', 'ld73')], as.matrix(r)
)
matplot(lead[,c('age', 'ld72', 'ld73')], r)
matplot(as.matrix(lead[,c('age', 'ld72', 'ld73')]), r)
example(matplot)
>splom
?splom
splom(~ age + ld72 + ld73, data=lead)
splom(r~ age + ld72 + ld73, data=lead)
plot(fitted(f), r); abline(h=0)  # yhat vs. r
r <- resid(f)
par(mfrow=c(2,2))   # 2x2 matrix of plots
plot(fitted(f), r); abline(h=0)  # yhat vs. r
with(lead, plot(age,    r));    abline(h=0)
with(lead, plot(ld72, r));      abline(h=0)
bwplot(sex ~ r)                 # box plot stratified by sex
qqnorm(r); qqline(r)            # linearity indicates normality
r
?qqline
example(qqplot)
qqnorm(r); qqline(r, col='red')   # linearity indicates normality
traceback()
qqnorm(f)
qqnorm(r)
qqline
qqline(r)
traceback()
qqline(datax=TRUE)
qqline(r,datax=TRUE)
traceback()
coef(r)
?abline
?stat_qq
qplot(sample=r)
qplot(sample=r)
qplot(sample=r)
qplot(sample=r)
r <- resid(f)
par(mfrow=c(2,2))   # 2x2 matrix of plots
plot(fitted(f), r); abline(h=0)  # yhat vs. r
with(lead, plot(age,    r));    abline(h=0)
with(lead, plot(ld73, r));      abline(h=0)
qqnorm(r)           # linearity indicates normality
args(Predict)
ggplot(Predict(f))
f <- ols(maxfwt ~ age + ld72 + ld73, data=lead)
ggplot(Predict(f))
ggplot(Predict(f, age))   # plot age effect, using default range,
plot(Predict(f, age=20:70))  # plot age=20,21,...,70
ggplot(Predict(f, age))   # plot age effect, using default range,
plot(Predict(f, age=3:15))  # plot age=3,4,...,15
plot(Predict(f, age=seq(3,16,length=150)))   # plot age=3-16, 150 points
ggplot(Predict(f, age=3:15))  # plot age=3,4,...,15
ggplot(Predict(f, age=seq(3,16,length=150)))   # plot age=3-16, 150 points
ggplot(Predict(f, age, conf.type='individual'))
p1 <- Predict(f, age, conf.int=0.99, conf.type='individual')
p2 <- Predict(f, age, conf.int=0.99, conf.type='mean')
p <- rbind(Individual=p1, Mean=p2)
ggplot(p)
dd
plot(Predict(f, ld73, age=3))
ggplot(Predict(f, ld73, age=3))
f
ggplot(Predict(f, ld73, age=c(3,9))  # add ,conf.int=FALSE to suppress conf. bands
)
bplot(Predict(f, ld72, ld73))
args(upData)
contents(lead)
 expch <- function(x) if(is.expression(x))
    sprintf('expression(%s)', as.character(x)) else deparse(x)

l=label(lead$ld72, units=TRUE, plot=TRUE)
l
dput('this')
dput('this,that')
expch(l)
source('~/R/rms/R/ggplot.Predict.s')
ggplot(f)
ggplot(Predict(f))
  expch <- function(x) if(is.expression(x)) x else dput(x)

sprintf('%s', expch('this'))
dput('this')
deparse('this')
  expch <- function(x) if(is.expression(x)) x else deparse(x)

sprintf('%s', expch('this'))
sprintf('%s', expch(expression(x^2)))
deparse(expression(x))
deparse(expression(x^2))
l
deparse(l)
sprintf('%s', deparse(l))
as.character(l)
cat(l)
dput(l)
dparse(l)
deparse(l)
l
attr(Predict(f), 'info')
attr(Predict(f), 'info')$label
attr(Predict(f), 'info')$Design$label
source('~/R/Hmisc/R/label.s')
l
labelPlotmath('Blood Lead Levels, 1972', units='mmHg')
source('~/R/Hmisc/R/label.s')
labelPlotmath('Blood Lead Levels, 1972', units='mmHg')
labelPlotmath('Blood Lead Levels, 1972', units='mmHg', chexpr=TRUE)
source('~/R/Hmisc/R/label.s')
labelPlotmath('Blood Lead Levels, 1972', units='mmHg')
labelPlotmath('Blood Lead Levels, 1972', units='mmHg', chexpr=TRUE)
w=labelPlotmath('Blood Lead Levels, 1972', units='mmHg', chexpr=TRUE)
w
parse(text=w)
eval(text=w)
eval(parse(text=w))
?facet_wrap_labeller
require(ggplot2)
?facet_wrap_labeller
facet_wrap_labeleer
facet_wrap_labeller
args(grid::editGrob)
args(grepl)
grepl('expression(', 'this')
grepl('expression\(', 'this')
grepl('expression\\(', 'this')
grepl('expression\\(', 'thisexpression(')
source('~/R/Hmisc/R/label.s');source('~/R/rms/R/ggplot.Predict.s')
ggplot(Predict(f))
specs(f)
ggplot(Predict(f))
attributes(lead$age)
ggplot(Predict(f))
contents(lead)
ggplot(Predict(f))
example(ggplot.Predict)
q()
getwd()
require(knitr)
knit('slide.Rnw')
lattice.getOption('panel.error')
lattice.setOption(panel.error=stop)
lattice.options(panel.error=stop)
lattice.getOption('panel.error')
lattice:::levelplot
traceback()
source('~/R/rms/R/bplot.s')
bplot(Predict(f, ld72, ld73))

args(traceback)
traceback(max.lines=1e6)
sink('/tmp/z')
traceback(max.lines=1e6)
sink()
system('xless /tmp/z')
bplot(Predict(f, ld72, ld73))

sink('/tmp/z')
traceback(max.lines=1e6)
sink()
system('xless /tmp/z')
lattice:::panel.levelplot
source('~/R/rms/R/bplot.s')
bplot(Predict(f, ld72, ld73))

args(gsub)
source('~/R/rms/R/bplot.s')
bplot(Predict(f, ld72, ld73))

gsub('lat\\.', '', 'thislat.that')
source('~/R/rms/R/bplot.s')
bplot(Predict(f, ld72, ld73))

lattice::panel.levelplot
bplot(Predict(f, ld72, ld73))

source('~/R/rms/R/bplot.s')
bplot(Predict(f, ld72, ld73))

fname
do.call(fname)
do.call(fname, list(...))
?do.call
get('lattice::panel.levelplot')
?get
eval(parse(text='lattice::panel.levelplot'))
source('~/R/rms/R/bplot.s')
bplot(Predict(f, ld72, ld73))

q()
